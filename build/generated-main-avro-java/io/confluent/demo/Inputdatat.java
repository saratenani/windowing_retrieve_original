/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.demo;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Inputdatat extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1723944264519933652L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Inputdatat\",\"namespace\":\"io.confluent.demo\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"val\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Inputdatat> ENCODER =
      new BinaryMessageEncoder<Inputdatat>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Inputdatat> DECODER =
      new BinaryMessageDecoder<Inputdatat>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Inputdatat> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Inputdatat> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Inputdatat>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Inputdatat to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Inputdatat from a ByteBuffer. */
  public static Inputdatat fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String key;
  @Deprecated public int val;
  @Deprecated public java.lang.String timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Inputdatat() {}

  /**
   * All-args constructor.
   * @param key The new value for key
   * @param val The new value for val
   * @param timestamp The new value for timestamp
   */
  public Inputdatat(java.lang.String key, java.lang.Integer val, java.lang.String timestamp) {
    this.key = key;
    this.val = val;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return val;
    case 2: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (java.lang.String)value$; break;
    case 1: val = (java.lang.Integer)value$; break;
    case 2: timestamp = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'val' field.
   * @return The value of the 'val' field.
   */
  public java.lang.Integer getVal() {
    return val;
  }

  /**
   * Sets the value of the 'val' field.
   * @param value the value to set.
   */
  public void setVal(java.lang.Integer value) {
    this.val = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.String getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.String value) {
    this.timestamp = value;
  }

  /**
   * Creates a new Inputdatat RecordBuilder.
   * @return A new Inputdatat RecordBuilder
   */
  public static io.confluent.demo.Inputdatat.Builder newBuilder() {
    return new io.confluent.demo.Inputdatat.Builder();
  }

  /**
   * Creates a new Inputdatat RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Inputdatat RecordBuilder
   */
  public static io.confluent.demo.Inputdatat.Builder newBuilder(io.confluent.demo.Inputdatat.Builder other) {
    return new io.confluent.demo.Inputdatat.Builder(other);
  }

  /**
   * Creates a new Inputdatat RecordBuilder by copying an existing Inputdatat instance.
   * @param other The existing instance to copy.
   * @return A new Inputdatat RecordBuilder
   */
  public static io.confluent.demo.Inputdatat.Builder newBuilder(io.confluent.demo.Inputdatat other) {
    return new io.confluent.demo.Inputdatat.Builder(other);
  }

  /**
   * RecordBuilder for Inputdatat instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Inputdatat>
    implements org.apache.avro.data.RecordBuilder<Inputdatat> {

    private java.lang.String key;
    private int val;
    private java.lang.String timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.demo.Inputdatat.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.val)) {
        this.val = data().deepCopy(fields()[1].schema(), other.val);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Inputdatat instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.demo.Inputdatat other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.val)) {
        this.val = data().deepCopy(fields()[1].schema(), other.val);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.String getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public io.confluent.demo.Inputdatat.Builder setKey(java.lang.String value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public io.confluent.demo.Inputdatat.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'val' field.
      * @return The value.
      */
    public java.lang.Integer getVal() {
      return val;
    }

    /**
      * Sets the value of the 'val' field.
      * @param value The value of 'val'.
      * @return This builder.
      */
    public io.confluent.demo.Inputdatat.Builder setVal(int value) {
      validate(fields()[1], value);
      this.val = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'val' field has been set.
      * @return True if the 'val' field has been set, false otherwise.
      */
    public boolean hasVal() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'val' field.
      * @return This builder.
      */
    public io.confluent.demo.Inputdatat.Builder clearVal() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.String getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.confluent.demo.Inputdatat.Builder setTimestamp(java.lang.String value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public io.confluent.demo.Inputdatat.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Inputdatat build() {
      try {
        Inputdatat record = new Inputdatat();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.String) defaultValue(fields()[0]);
        record.val = fieldSetFlags()[1] ? this.val : (java.lang.Integer) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Inputdatat>
    WRITER$ = (org.apache.avro.io.DatumWriter<Inputdatat>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Inputdatat>
    READER$ = (org.apache.avro.io.DatumReader<Inputdatat>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
